--- rc80211_minstrel_ht_original.c	2024-06-27 22:18:12.657316263 +0300
+++ rc80211_minstrel_ht_quick.c	2024-06-27 22:19:36.656951500 +0300
@@ -676,29 +676,29 @@
 	}
 }
 
-static void
-minstrel_downgrade_rate(struct minstrel_ht_sta *mi, u16 *idx, bool primary)
-{
-	int group, orig_group;
-
-	orig_group = group = *idx / MCS_GROUP_RATES;
-	while (group > 0) {
-		group--;
-
-		if (!mi->supported[group])
-			continue;
-
-		if (minstrel_mcs_groups[group].streams >
-		    minstrel_mcs_groups[orig_group].streams)
-			continue;
-
-		if (primary)
-			*idx = mi->groups[group].max_group_tp_rate[0];
-		else
-			*idx = mi->groups[group].max_group_tp_rate[1];
-		break;
-	}
-}
+// static void
+// minstrel_downgrade_rate(struct minstrel_ht_sta *mi, u16 *idx, bool primary)
+// {
+// 	int group, orig_group;
+
+// 	orig_group = group = *idx / MCS_GROUP_RATES;
+// 	while (group > 0) {
+// 		group--;
+
+// 		if (!mi->supported[group])
+// 			continue;
+
+// 		if (minstrel_mcs_groups[group].streams >
+// 		    minstrel_mcs_groups[orig_group].streams)
+// 			continue;
+
+// 		if (primary)
+// 			*idx = mi->groups[group].max_group_tp_rate[0];
+// 		else
+// 			*idx = mi->groups[group].max_group_tp_rate[1];
+// 		break;
+// 	}
+// }
 
 static void
 minstrel_aggr_check(struct ieee80211_sta *pubsta, struct sk_buff *skb)
@@ -723,6 +723,248 @@
 	ieee80211_start_tx_ba_session(pubsta, tid, 0);
 }
 
+//function to go the left mcs group when is the second series of probing
+static void go_to_the_left_group(int idx, struct minstrel_ht_sta *mi) {
+	mi->rates[0] = idx;
+	//if [0,7) position of the group change group making -10 and -9 to decrease the number of streams
+	//beacuse there are 10 MCS rates in a group
+	if(idx%MCS_GROUP_RATES>=0 && idx%MCS_GROUP_RATES<7) {
+		mi->rates[1] = idx-9;
+		mi->rates[2] = idx-10;
+	}
+	//if position=7 of the group we dont want 8 and 9 positions 
+	//by making -10 and -7 the immediately next MCS index from -10 position
+	else if(idx%MCS_GROUP_RATES==7) {
+		mi->rates[1] = idx-7;
+		mi->rates[2] = idx-10;
+	}
+}
+
+//function to go the right mcs group when is the second series of probing
+static void go_to_the_right_group(int idx, struct minstrel_ht_sta *mi) {
+	//if (0,7] position of the group change group making +10 and +9 to increase the number of streams
+	//beacuse there are 10 MCS rates in a group
+	if(idx%MCS_GROUP_RATES>0 && idx%MCS_GROUP_RATES<=7) {
+		mi->rates[0] = idx+10;
+		mi->rates[1] = idx+9;
+	}
+	//if position=0 of the group we dont want 8 and 9 positions 
+	//by making +10 and +7 the immediately previous MCS index from +10 position 
+	else if(idx%MCS_GROUP_RATES==0) {
+		mi->rates[0] = idx+10;
+		mi->rates[1] = idx+7;
+	}
+	mi->rates[2] = idx;
+}
+
+//function that is called when the state is in transmission state to make the rates three consecutives rates in decreasing order
+static void tx_state(struct minstrel_ht_sta *mi, int i) {
+	if(i==0) { //if the i is in position=0 keeps the same r1,r2,r3, if the packet is transmitted successfully with r1
+		mi->rates[0] = mi->max_tp_rate[0];
+		mi->rates[1] = mi->max_tp_rate[1];
+		mi->rates[2] = mi->max_tp_rate[2];
+	}
+	else if(i==1) { //if the index is in position=1 assign r1 = r2, r2 = r3 and r3 = r3 -1 or -3 or the same
+		mi->rates[0] = mi->max_tp_rate[1];
+		mi->rates[1] = mi->max_tp_rate[2];
+		if (mi->max_tp_rate[2]%MCS_GROUP_RATES!=0) {
+			mi->rates[2] = mi->max_tp_rate[2]-1;
+		}
+		else if (mi->max_tp_rate[2]%MCS_GROUP_RATES==0&&mi->max_tp_rate[2]!=0) {
+			mi->rates[2] = mi->max_tp_rate[2]-3;
+		}
+		else {
+			mi->rates[2] = mi->max_tp_rate[2];
+		}
+	}
+	else if(i==2) { //if the index is in position=2 assign r1 = r3, r2 = r3 -1 or -3 or the same and r3 = r3 -2 or -4 or the same
+		mi->rates[0] = mi->max_tp_rate[2];
+		if (mi->max_tp_rate[2]%MCS_GROUP_RATES!=0) { //greater than zero position in groups
+			mi->rates[1] = mi->max_tp_rate[2]-1;
+			if (mi->max_tp_rate[2]-1%MCS_GROUP_RATES!=0) {
+				mi->rates[2] = mi->max_tp_rate[2]-2;
+			}
+			else if (mi->max_tp_rate[2]-1%MCS_GROUP_RATES==0&&mi->max_tp_rate[2]-1!=0) { 
+				mi->rates[2] = mi->max_tp_rate[2]-4;
+			}
+			else {
+				mi->rates[2] = mi->max_tp_rate[2];
+			}
+		}
+		else if (mi->max_tp_rate[2]%MCS_GROUP_RATES==0 && mi->max_tp_rate[2]!=0) { //group 1 or 2 in zero position so must fall to the group 0
+			mi->rates[1] = mi->max_tp_rate[2]-3;
+			mi->rates[2] = mi->max_tp_rate[2]-4;
+		}
+		else {
+			mi->rates[1] = mi->max_tp_rate[2];
+			mi->rates[2] = mi->max_tp_rate[2];
+		}
+	}
+}
+
+//function that is called when the state is in probe state with two probe series(first and second probe series)
+static void probe_state(int idx, struct minstrel_ht_sta *mi) {
+	if(!mi->first_probe) { //first probe series
+		//if (0,7) position keep in the same group with +-1 in r1 and r3
+		if(idx%MCS_GROUP_RATES>0 && idx%MCS_GROUP_RATES<7) {
+			mi->rates[0] = idx+1;
+			mi->rates[1] = idx;
+			mi->rates[2] = idx-1;
+		}
+		//if position=7 decrease -1 and -2 for r2 and r3 respectively
+		else if(idx%MCS_GROUP_RATES==7) {
+			mi->rates[0] = idx;
+			mi->rates[1] = idx-1;
+			mi->rates[2] = idx-2;
+		}
+		//if position=0 increase +2 and +1 for r1 and r2 respectively
+		else if(idx%MCS_GROUP_RATES==0) {
+			mi->rates[0] = idx+2;
+			mi->rates[1] = idx+1;
+			mi->rates[2] = idx;
+		}
+		mi->first_probe = true;
+		// if (mi->probe_interval != (10 * HZ) / 1000) { //for slow probing
+		// 	mi->probe_interval = (10 * HZ) / 1000;
+		// 	mi->time_of_probing = jiffies;
+		// }
+		mi->probe_interval = (10 * HZ) / 1000; //for quick probing
+		printk(KERN_INFO "Probe interval from probe_state = %ld\n", mi->probe_interval);
+	}
+	else { //second probe series
+		mi->first_probe = false;
+		mi->probe_interval = (60 * HZ) / 1000; //for quick probing
+		// if (mi->probe_interval != (60 * HZ) / 1000) { //for slow probing
+		// 	mi->probe_interval = (60 * HZ) / 1000;
+		// 	mi->time_of_probing = jiffies;
+		// }
+		printk(KERN_INFO "Probe interval from probe_state = %ld\n", mi->probe_interval);
+		if(idx>=0&&idx<=7) { //if the group is the left of the three groups
+			go_to_the_right_group(idx,mi);
+		}
+		else if(idx>=20&&idx<=27) { //if the group is the right of the three groups
+			go_to_the_left_group(idx,mi);
+		}
+		else if(mi->left_or_right_group==0) { //if the group is the middle one go to the left group
+			//printk(KERN_INFO "MIDDLE->LEFT\n");
+			mi->left_or_right_group = 1;
+			go_to_the_left_group(idx,mi);
+		}
+		else if(mi->left_or_right_group==1) { //if the group is the middle one go to the right group
+			//printk(KERN_INFO "MIDDLE->RIGHT\n");
+			mi->left_or_right_group = 0;
+			go_to_the_right_group(idx,mi);
+		}
+	}
+	printk(KERN_INFO "r1=%d, r2=%d, r3=%d\n", mi->rates[0], mi->rates[1], mi->rates[2]);
+	mi->probe_state = false;
+}
+
+//function that implements the l3s get rate function
+static void get_rate(struct minstrel_ht_sta *mi, struct minstrel_priv *mp, int index, int i) {
+	//l3s
+	//probe()==true
+	if(mi->probe_state) {
+		printk(KERN_INFO "PROBE_STATE\n");
+		probe_state(index,mi);
+		minstrel_ht_update_rates(mp, mi);
+		mi->current_state = 1;
+	}
+	else { //tx()==true
+		//printk(KERN_INFO "TX_STATE\n");
+		tx_state(mi,i);
+		if (mi->current_state == 1) { //if previous state was probe state update the rates and reset the counters
+			minstrel_ht_update_rates(mp, mi);
+		}
+		mi->current_state = 0;
+	}
+}
+
+//function that makes recovery and goes immediately in the previous MCS rate
+static void recovery(struct minstrel_ht_sta *mi) {
+	int i;
+
+	for(i=0; i<MAX_THR_RATES-1; i++) {
+		if(mi->rates[i]%MCS_GROUP_RATES>=1) { //if position=1 make -1 in the index
+			mi->rates[i] -= 1;
+		}
+		else if(mi->rates[i]!=0) { //if position=0 of 2nd and 3rd group make -3 to go the previous valid MCS rate
+			mi->rates[i] -= 3;
+		}
+	}
+}
+
+//function that calculates the rate statistics(short-term) of l3s algorithm
+static void rate_statistics(struct ieee80211_tx_info *info, struct minstrel_ht_sta *mi, struct minstrel_priv *mp, bool last, 
+							struct ieee80211_tx_rate *ar, int i) {
+	int index, j;
+	//ar[i].count is the number of attempts to transmit a packet with this rate
+	//so we reduce by 1 to get the retransmissions, if the packet is transmitted 
+	//with r2 first attempt the consecutive_retries are 2 with r1
+	mi->consecutive_retries[i] += ar[i].count - 1;
+	if (mi->consecutive_retries[i]==0 && last) { //no retries
+		//printk(KERN_INFO "ACK\n");
+		//packet was acknowledged, update L3S-specific counters
+		//increase successes, reset failures
+		mi->consecutive_successes++;
+		mi->consecutive_failures = 0;
+		if (mi->consecutive_successes >= 10) {
+			// if (mi->probe_interval != (90 * HZ) / 1000) { //for slow probing
+			// 	mi->probe_interval = (90 * HZ) / 1000;
+			// 	mi->time_of_probing = jiffies;
+			// }
+			mi->probe_interval = (90 * HZ) / 1000; //for quick probing
+			printk(KERN_INFO "Probe interval from rate_statistics = %ld\n", mi->probe_interval);
+		}
+	} 
+	else if(mi->consecutive_retries[i] >= 1) { //one or more retries, so missed acks
+		printk(KERN_INFO "MISSED ACK\n");
+		//packet was not acknowledged (missed ACK)
+		//increase failures, reset successes
+		mi->consecutive_successes = 0;
+		mi->consecutive_failures += mi->consecutive_retries[i];
+		if (mi->consecutive_failures >= 4) { //handle four or more consecutive failures
+			// if (mi->probe_interval != (10 * HZ) / 1000) { //for slow probing
+			// 	mi->probe_interval = (10 * HZ) / 1000;
+			// 	mi->time_of_probing = jiffies;
+			// }
+			mi->probe_interval = (10 * HZ) / 1000; //for quick probing
+			printk(KERN_INFO "Probe interval from rate_statistics = %ld\n", mi->probe_interval);
+		}
+		else if (mi->consecutive_failures >= 2) { //handle two consecutive missed ACKs
+			printk(KERN_INFO "RECOVERY\n");
+			//fallback immediately to the previous MCS rate
+			recovery(mi); //this function is to handle recovery logic
+			minstrel_ht_update_rates(mp, mi); //this function is to update the rate
+			// if (mi->probe_interval != (30 * HZ) / 1000) { //for slow probing
+			// 	mi->probe_interval = (30 * HZ) / 1000;
+			// 	mi->time_of_probing = jiffies;
+			// }
+			mi->probe_interval = (30 * HZ) / 1000; //for quick probing
+			printk(KERN_INFO "Probe interval from rate_statistics = %ld\n", mi->probe_interval);
+		}
+	}
+	if(last) {
+		if (mi->consecutive_failures!=0) { //reset the consecutive_failures and consecutive_retries for the next packet
+			mi->consecutive_failures = 0;
+			for(j=0; j<MAX_THR_RATES-1; j++) {
+				mi->consecutive_retries[j]=0;
+			}
+		}
+		index = ar[i].idx+(ar[i].idx/8)*(MCS_GROUP_RATES-8); //idx is for mcs and index for index of the group
+		//packet may be more than one frame so the total packets counter must be incremented for all frames
+		//and the ack counter must be incremented for all frames of the packet that were acknowledged
+		mi->total_packets_per_mcs[index] += info->status.ampdu_len;
+		mi->ack_counter_per_mcs[index] += info->status.ampdu_ack_len;
+		//calculation of per statistics according the index
+		if(mi->total_packets_per_mcs[index]!=0) {
+			mi->per[index] = (100 * (mi->total_packets_per_mcs[index] - mi->ack_counter_per_mcs[index])) / mi->total_packets_per_mcs[index];
+		}
+
+		get_rate(mi, mp, index, i);
+	}
+}
+
 static void
 minstrel_ht_tx_status(void *priv, struct ieee80211_supported_band *sband,
                       void *priv_sta, struct ieee80211_tx_status *st)
@@ -731,9 +973,9 @@
 	struct minstrel_ht_sta_priv *msp = priv_sta;
 	struct minstrel_ht_sta *mi = &msp->ht;
 	struct ieee80211_tx_rate *ar = info->status.rates;
-	struct minstrel_rate_stats *rate, *rate2;
+	struct minstrel_rate_stats *rate; //*rate2;
 	struct minstrel_priv *mp = priv;
-	bool last, update = false;
+	bool last; //update = false;
 	int i;
 
 	if (!msp->is_ht)
@@ -776,36 +1018,41 @@
 			rate->success += info->status.ampdu_ack_len;
 
 		rate->attempts += ar[i].count * info->status.ampdu_len;
+
+		//l3s start
+		rate_statistics(info,mi,mp,last,ar,i);
+		//l3s end
 	}
 
+	//this code is out because is minstrel logic
 	/*
 	 * check for sudden death of spatial multiplexing,
 	 * downgrade to a lower number of streams if necessary.
 	 */
-	rate = minstrel_get_ratestats(mi, mi->max_tp_rate[0]);
-	if (rate->attempts > 30 &&
-	    MINSTREL_FRAC(rate->success, rate->attempts) <
-	    MINSTREL_FRAC(20, 100)) {
-		minstrel_downgrade_rate(mi, &mi->max_tp_rate[0], true);
-		update = true;
-	}
-
-	rate2 = minstrel_get_ratestats(mi, mi->max_tp_rate[1]);
-	if (rate2->attempts > 30 &&
-	    MINSTREL_FRAC(rate2->success, rate2->attempts) <
-	    MINSTREL_FRAC(20, 100)) {
-		minstrel_downgrade_rate(mi, &mi->max_tp_rate[1], false);
-		update = true;
-	}
-
-	if (time_after(jiffies, mi->last_stats_update +
-				(mp->update_interval / 2 * HZ) / 1000)) {
-		update = true;
-		minstrel_ht_update_stats(mp, mi);
-	}
+	// rate = minstrel_get_ratestats(mi, mi->max_tp_rate[0]);
+	// if (rate->attempts > 30 &&
+	//     MINSTREL_FRAC(rate->success, rate->attempts) <
+	//     MINSTREL_FRAC(20, 100)) {
+	// 	minstrel_downgrade_rate(mi, &mi->max_tp_rate[0], true);
+	// 	update = true;
+	// }
+
+	// rate2 = minstrel_get_ratestats(mi, mi->max_tp_rate[1]);
+	// if (rate2->attempts > 30 &&
+	//     MINSTREL_FRAC(rate2->success, rate2->attempts) <
+	//     MINSTREL_FRAC(20, 100)) {
+	// 	minstrel_downgrade_rate(mi, &mi->max_tp_rate[1], false);
+	// 	update = true;
+	// }
+
+	// if (time_after(jiffies, mi->last_stats_update +
+	// 			(mp->update_interval / 2 * HZ) / 1000)) {
+	// 	update = true;
+	// 	minstrel_ht_update_stats(mp, mi);
+	// }
 
-	if (update)
-		minstrel_ht_update_rates(mp, mi);
+	// if (update)
+	// 	minstrel_ht_update_rates(mp, mi);
 }
 
 static inline int
@@ -872,7 +1119,6 @@
 	         (++mrs->retry_count < mp->max_retry));
 }
 
-
 static void
 minstrel_ht_set_rate(struct minstrel_priv *mp, struct minstrel_ht_sta *mi,
                      struct ieee80211_sta_rates *ratetbl, int offset, int index)
@@ -886,15 +1132,10 @@
 	if (!mrs->retry_updated)
 		minstrel_calc_retransmit(mp, mi, index);
 
-	if (mrs->prob_ewma < MINSTREL_FRAC(20, 100) || !mrs->retry_count) {
+	//l3s we change all the retry counts to 2
 		ratetbl->rate[offset].count = 2;
-		ratetbl->rate[offset].count_rts = 2;
 		ratetbl->rate[offset].count_cts = 2;
-	} else {
-		ratetbl->rate[offset].count = mrs->retry_count;
-		ratetbl->rate[offset].count_cts = mrs->retry_count;
-		ratetbl->rate[offset].count_rts = mrs->retry_count_rtscts;
-	}
+	ratetbl->rate[offset].count_rts = 2;
 
 	if (index / MCS_GROUP_RATES == MINSTREL_CCK_GROUP)
 		idx = mp->cck_rates[index % ARRAY_SIZE(mp->cck_rates)];
@@ -914,8 +1155,8 @@
 		ratetbl->rate[offset].count = ratetbl->rate[offset].count_rts;
 		flags |= IEEE80211_TX_RC_USE_RTS_CTS;
 	}
-
 	ratetbl->rate[offset].idx = idx;
+	//printk(KERN_INFO "RATE_BL[%d]: %d\n", offset, idx);
 	ratetbl->rate[offset].flags = flags;
 }
 
@@ -985,22 +1226,64 @@
 	rates = kzalloc(sizeof(*rates), GFP_ATOMIC);
 	if (!rates)
 		return;
-
+	//l3s start
+	mi->previous_rate = mi->max_tp_rate[0];
+	//l3s end
 	/* Start with max_tp_rate[0] */
-	minstrel_ht_set_rate(mp, mi, rates, i++, mi->max_tp_rate[0]);
+	minstrel_ht_set_rate(mp, mi, rates, i++, mi->rates[0]);
 
 	if (mp->hw->max_rates >= 3) {
 		/* At least 3 tx rates supported, use max_tp_rate[1] next */
-		minstrel_ht_set_rate(mp, mi, rates, i++, mi->max_tp_rate[1]);
+		minstrel_ht_set_rate(mp, mi, rates, i++, mi->rates[1]);
 	}
 
 	if (mp->hw->max_rates >= 2) {
-		minstrel_ht_set_rate(mp, mi, rates, i++, mi->max_prob_rate);
+		//l3s start
+		//minstrel_ht_set_rate(mp, mi, rates, i++, mi->max_prob_rate);
+		minstrel_ht_set_rate(mp, mi, rates, i++, mi->rates[2]);
+		//l3s end
+	}
+	//l3s start
+	mi->current_rate = mi->rates[0];
+	//set the new rates in max_tp_rate array
+	for(i=0; i<MAX_THR_RATES-1; i++) {
+		mi->max_tp_rate[i]=mi->rates[i];
 	}
-
+	//l3s end
 	mi->sta->max_rc_amsdu_len = minstrel_ht_get_max_amsdu_len(mi);
 	rates->rate[i].idx = -1;
 	rate_control_set_rates(mp->hw, mi->sta, rates);
+
+	//l3s start
+	//reset counters
+	mi->consecutive_successes = 0;
+	mi->consecutive_failures = 0;
+	for(i=0; i<MAX_THR_RATES-1; i++) {
+		mi->consecutive_retries[i]=0;
+	}
+	if(!mi->recovery) { //if recovery is true don't check if rate increase
+		if(mi->previous_rate/MCS_GROUP_RATES==mi->current_rate/MCS_GROUP_RATES) { //same group
+			if(mi->current_rate>mi->previous_rate) {
+				printk(KERN_INFO "SAME_GROUP_INCREASE_RATE\n");
+				// if (mi->probe_interval != (20 * HZ) / 1000) { //for slow probing
+				// 	mi->probe_interval = (20 * HZ) / 1000;
+				// 	mi->time_of_probing = jiffies;
+				// }
+				mi->probe_interval = (20 * HZ) / 1000; //for quick probing
+				printk(KERN_INFO "Probe interval from update_rates = %ld\n", mi->probe_interval);
+			}
+		}
+		else if(mi->current_rate/MCS_GROUP_RATES>mi->previous_rate/MCS_GROUP_RATES) { //different groups, group is increased
+			printk(KERN_INFO "DIFFERENT_GROUP_INCREASE_RATE\n");
+			// if (mi->probe_interval != (20 * HZ) / 1000) { //for slow probing
+			// 	mi->probe_interval = (20 * HZ) / 1000;
+			// 	mi->time_of_probing = jiffies;
+			// }
+			mi->probe_interval = (20 * HZ) / 1000; //for quick probing
+			printk(KERN_INFO "Probe interval from update_rates = %ld\n", mi->probe_interval);
+		}
+	}
+	//l3s end
 }
 
 static int
@@ -1110,4 +1393,13 @@
 
+	//l3s start
+	//periodically called logic to manage rate control setting the probe state to true
+	if (!mi->probe_state && time_after(jiffies, mi->time_of_probing + mi->probe_interval)) { //(jiffies-time_of_probing) > probe_interval
+		//printk(KERN_INFO "TIMER!!! START PROBING WITH %ld\n", mi->probe_interval);
+		mi->probe_state = true;
+		mi->time_of_probing = jiffies; //for quick probing
+	}
+	//l3s end
+	
 	/* Don't use EAPOL frames for sampling on non-mrr hw */
 	if (mp->hw->max_rates == 1 &&
 	    (info->control.flags & IEEE80211_TX_CTRL_PORT_CTRL_PROTO))
@@ -1209,6 +1501,12 @@
 
 	mi->sta = sta;
 	mi->last_stats_update = jiffies;
+	//l3s start
+	printk(KERN_INFO "Initialization\n");
+	mi->probe_interval = (60 * HZ) / 1000;
+	mi->time_of_probing = jiffies;
+	printk(KERN_INFO "Probe interval from update_caps = %ld\n", mi->probe_interval);
+	//l3s end
 
 	ack_dur = ieee80211_frame_duration(sband->band, 10, 60, 1, 1, 0);
 	mi->overhead = ieee80211_frame_duration(sband->band, 0, 60, 1, 1, 0);